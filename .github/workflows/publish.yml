name: Publish Python üêç distribution üì¶ to PyPI and TestPyPI

on:
  release:
    types: [published]
  workflow_dispatch:  # Allow manual triggering for testing

jobs:
  build:
    name: Build distribution üì¶
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
          cache: 'pip'  # Cache pip dependencies
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine
      
      - name: Build distribution packages
        run: python -m build
      
      - name: Verify built packages
        run: |
          python -m twine check dist/*
          ls -la dist/
      
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4  # Updated to v4
        with:
          name: python-package-distributions
          path: dist/
          retention-days: 30  # Keep artifacts for 30 days

  test-package:
    name: Test built package üß™
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Download built packages
        uses: actions/download-artifact@v4  # Updated to v4
        with:
          name: python-package-distributions
          path: dist/
      
      - name: Set up Python for testing
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      
      - name: Test package installation
        run: |
          # Test installing the wheel
          pip install dist/*.whl
          # Add basic import test if you know the package structure
          # python -c "import your_package_name"

  testpypi-publish:
    name: Upload release to Test-PyPI üß™
    needs: [build, test-package]  # Added test-package dependency
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'  # Only on actual releases
    
    environment:
      name: testpypi
      url: https://test.pypi.org/p/fgspectra
    
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
      contents: read   # Good practice to be explicit
    
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4  # Updated to v4
        with:
          name: python-package-distributions
          path: dist/
      
      - name: Publish package distributions to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          print-hash: true  # Print file hashes for verification

  pypi-publish:
    name: Upload release to PyPI üöÄ
    needs: [build, test-package, testpypi-publish]  # Wait for TestPyPI success
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    
    environment:
      name: pypi
      url: https://pypi.org/p/fgspectra
    
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
      contents: read   # Good practice to be explicit
    
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4  # Updated to v4
        with:
          name: python-package-distributions
          path: dist/
      
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true  # Print file hashes for verification

  create-github-release-assets:
    name: Upload to GitHub Release üìé
    needs: [pypi-publish]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    
    permissions:
      contents: write  # Needed to upload release assets
    
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      
      - name: Upload artifacts to GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload '${{ github.event.release.tag_name }}' dist/* --repo '${{ github.repository }}'